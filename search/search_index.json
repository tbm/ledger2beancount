{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ledger2beancount \uf0c1 ledger2beancount is a script to automatically convert Ledger -based textual ledgers to Beancount ones. Conversion is based on (concrete) syntax, so that information that is not meaningful for accounting reasons but still valuable (e.g., comments, formatting, etc.) can be preserved. ledger2beancount aims to be compatible with the latest official release of beancount.","title":"Introduction"},{"location":"#ledger2beancount","text":"ledger2beancount is a script to automatically convert Ledger -based textual ledgers to Beancount ones. Conversion is based on (concrete) syntax, so that information that is not meaningful for accounting reasons but still valuable (e.g., comments, formatting, etc.) can be preserved. ledger2beancount aims to be compatible with the latest official release of beancount.","title":"ledger2beancount"},{"location":"authors/","text":"Authors \uf0c1 The authors of ledger2beancount are: Stefano Zacchiroli < zack@upsilon.cc > Martin Michlmayr < tbm@cyrius.com > Stefano started the project. Martin joined later and added more functionality, documentation and test cases. We have also had contributions and input from: Alen Siljak (bug reports) Jelmer Vernoo\u0133 (Debian package) Johannes Raufeisen (bug reports) John Wiegley (help with compatibility with ledger) Marin Bernard (bug reports) Martin Blais (help with compatibility with beancount) Simon Michael (bug reports; help with compatibility with hledger) Thierry (bug reports; documentation) Zhuoyun Wei (Arch Linux package) While ledger2beancount is a volunteer project, some work done by Martin was sponsored by Software Freedom Conservancy and Software in the Public Interest, Inc.","title":"Authors and contributors"},{"location":"authors/#authors","text":"The authors of ledger2beancount are: Stefano Zacchiroli < zack@upsilon.cc > Martin Michlmayr < tbm@cyrius.com > Stefano started the project. Martin joined later and added more functionality, documentation and test cases. We have also had contributions and input from: Alen Siljak (bug reports) Jelmer Vernoo\u0133 (Debian package) Johannes Raufeisen (bug reports) John Wiegley (help with compatibility with ledger) Marin Bernard (bug reports) Martin Blais (help with compatibility with beancount) Simon Michael (bug reports; help with compatibility with hledger) Thierry (bug reports; documentation) Zhuoyun Wei (Arch Linux package) While ledger2beancount is a volunteer project, some work done by Martin was sponsored by Software Freedom Conservancy and Software in the Public Interest, Inc.","title":"Authors"},{"location":"changelog/","text":"ledger2beancount releases \uf0c1 2.3 (unreleased) \uf0c1 Convert documentation to mkdocs 2.2 (2020-05-30) \uf0c1 Show warning for unknown apply directive Recognize apply rate directive (an alias of apply fixed ) Don't convert meta-data on ignored virtual postings but keep as comments Update location of beancount repository 2.1 (2020-04-06) \uf0c1 Handle postings with posting dates and comments but no amount Show transactions with only one posting (without bucket ) Adding spacing between automatic declarations Preserve preliminary info at the top 2.0 (2020-02-22) \uf0c1 Handle comments in account and commodity declarations Handle transactions with a single posting (without bucket ) Handle empty metadata values Rewrite Emacs modeline 1.8 (2019-06-12) \uf0c1 Add support for apply year Fix incorrect account mapping of certain accounts Handle fixated commodity and postings without amount Improve behaviour for invalid end without apply Improve error message when date can't be parsed Deal with account names consisting of a single letter Ensure account names don't end with a colon Skip ledger directives eval , python , and value Don't assume all filenames for include end in .ledger Support price directives with commodity symbols Support decimal commas in price directives Don't misparse balance assignment as commodity Ensure all beancount commodities have at least 2 characters Ensure all beancount metadata keys have at least 2 characters Don't misparse certain metadata as implicit conversion Avoid duplicate commodity directives for commodities with name collisions Recognise deferred postings Recognise def directive 1.7 (2019-04-22) \uf0c1 Don't misparse account and commodity with mixed tab/space separators Rename account names consisting of a root name without subaccount Warn when non-standard root names are used Avoid duplicate open directives for accounts with name collisions Don't warn for renamed tags that won't show up in the beancount file Add account_regex option to mass rename account names Add man page and improve documentation 1.6 (2019-03-25) \uf0c1 Add support for fixated prices and costs Handle account names that contain brackets Don't parse trailing tabs as part of the account name Escape backslashes in the narration 1.5 (2019-01-30) \uf0c1 Replace commodities in balance assertions Add support for posting-level dates Add support for hledger features Add support for balance assignments Handle comments on the same line as the payee Handle comments, tags and metadata on postings with balance assertions Handle metadata on postings with cost or price information Handle simple implicit conversions 1.4 (2018-12-01) \uf0c1 Don't parse trailing whitespace as part of the account name Replace commodities in lot costs Avoid mangling of lot cost with other lot information Don't require whitespace between {} and @ in lot information 1.3 (2018-09-29) \uf0c1 Handle tags on the same line as postings correctly Allow (commented) beancount entries in ledger input file Handle amounts without leading zeroes 1.2 (2018-05-17) \uf0c1 Updates for beancount 2.1.0: Allow UTF-8 letters and digits in account names Allow full-line comments in transactions Allow transaction tags and links on multiple lines Handle posting tags on multiple lines Always convert posting-level tags to metadata Improve parsing of the transaction header 1.1 (2018-05-01) \uf0c1 Happy International Workers' Day release! Handle block comments without indentation correctly Preserve comments for postings with lots Use beancount's pushtag/poptag for ledger's apply tag Handle tag directives with associated commands correctly Allow option link_match to work with tag_as_metadata: true Handle posting-level tags without indentation correctly with tag_as_metadata: false Ensure payee_match is predictable Preserve comments for postings with lots Embed an optional beancount header to the converted file to specify beancount options Convert ledger metadata keys to valid beancount metadata keys Add conversion notes when accounts, commodities or metadata keys are automatically renamed by ledger2beancount Add capability to ignore certain lines Keep whitespace intact when renaming account names Improve documentation on assigning payees based on transactions Add more test cases Run the test suite only if something has changed 1.0 (2018-03-30) \uf0c1 Initial release with support for the majority of features from ledger","title":"Release notes"},{"location":"changelog/#ledger2beancount-releases","text":"","title":"ledger2beancount releases"},{"location":"changelog/#23-unreleased","text":"Convert documentation to mkdocs","title":"2.3 (unreleased)"},{"location":"changelog/#22-2020-05-30","text":"Show warning for unknown apply directive Recognize apply rate directive (an alias of apply fixed ) Don't convert meta-data on ignored virtual postings but keep as comments Update location of beancount repository","title":"2.2 (2020-05-30)"},{"location":"changelog/#21-2020-04-06","text":"Handle postings with posting dates and comments but no amount Show transactions with only one posting (without bucket ) Adding spacing between automatic declarations Preserve preliminary info at the top","title":"2.1 (2020-04-06)"},{"location":"changelog/#20-2020-02-22","text":"Handle comments in account and commodity declarations Handle transactions with a single posting (without bucket ) Handle empty metadata values Rewrite Emacs modeline","title":"2.0 (2020-02-22)"},{"location":"changelog/#18-2019-06-12","text":"Add support for apply year Fix incorrect account mapping of certain accounts Handle fixated commodity and postings without amount Improve behaviour for invalid end without apply Improve error message when date can't be parsed Deal with account names consisting of a single letter Ensure account names don't end with a colon Skip ledger directives eval , python , and value Don't assume all filenames for include end in .ledger Support price directives with commodity symbols Support decimal commas in price directives Don't misparse balance assignment as commodity Ensure all beancount commodities have at least 2 characters Ensure all beancount metadata keys have at least 2 characters Don't misparse certain metadata as implicit conversion Avoid duplicate commodity directives for commodities with name collisions Recognise deferred postings Recognise def directive","title":"1.8 (2019-06-12)"},{"location":"changelog/#17-2019-04-22","text":"Don't misparse account and commodity with mixed tab/space separators Rename account names consisting of a root name without subaccount Warn when non-standard root names are used Avoid duplicate open directives for accounts with name collisions Don't warn for renamed tags that won't show up in the beancount file Add account_regex option to mass rename account names Add man page and improve documentation","title":"1.7 (2019-04-22)"},{"location":"changelog/#16-2019-03-25","text":"Add support for fixated prices and costs Handle account names that contain brackets Don't parse trailing tabs as part of the account name Escape backslashes in the narration","title":"1.6 (2019-03-25)"},{"location":"changelog/#15-2019-01-30","text":"Replace commodities in balance assertions Add support for posting-level dates Add support for hledger features Add support for balance assignments Handle comments on the same line as the payee Handle comments, tags and metadata on postings with balance assertions Handle metadata on postings with cost or price information Handle simple implicit conversions","title":"1.5 (2019-01-30)"},{"location":"changelog/#14-2018-12-01","text":"Don't parse trailing whitespace as part of the account name Replace commodities in lot costs Avoid mangling of lot cost with other lot information Don't require whitespace between {} and @ in lot information","title":"1.4 (2018-12-01)"},{"location":"changelog/#13-2018-09-29","text":"Handle tags on the same line as postings correctly Allow (commented) beancount entries in ledger input file Handle amounts without leading zeroes","title":"1.3 (2018-09-29)"},{"location":"changelog/#12-2018-05-17","text":"Updates for beancount 2.1.0: Allow UTF-8 letters and digits in account names Allow full-line comments in transactions Allow transaction tags and links on multiple lines Handle posting tags on multiple lines Always convert posting-level tags to metadata Improve parsing of the transaction header","title":"1.2 (2018-05-17)"},{"location":"changelog/#11-2018-05-01","text":"Happy International Workers' Day release! Handle block comments without indentation correctly Preserve comments for postings with lots Use beancount's pushtag/poptag for ledger's apply tag Handle tag directives with associated commands correctly Allow option link_match to work with tag_as_metadata: true Handle posting-level tags without indentation correctly with tag_as_metadata: false Ensure payee_match is predictable Preserve comments for postings with lots Embed an optional beancount header to the converted file to specify beancount options Convert ledger metadata keys to valid beancount metadata keys Add conversion notes when accounts, commodities or metadata keys are automatically renamed by ledger2beancount Add capability to ignore certain lines Keep whitespace intact when renaming account names Improve documentation on assigning payees based on transactions Add more test cases Run the test suite only if something has changed","title":"1.1 (2018-05-01)"},{"location":"changelog/#10-2018-03-30","text":"Initial release with support for the majority of features from ledger","title":"1.0 (2018-03-30)"},{"location":"compatibility/","text":"Beancount compatibility \uf0c1 The syntax of beancount is quite stable but it's expected to become slightly less restrictive as some missing features are implemented (such as posting-level tags). ledger2beancount aims to be compatible with the latest official release of beancount, but some functionality may require an unreleased version of beancount. You can install the latest development version of beancount directly from the beancount repository: pip3 install git+https://github.com/beancount/beancount/ Currently, there are no features that require an unreleased version of beancount. ledger2beancount is largely compatible with Beancount 2.0. If you use the following features, you need Beancount 2.1: UTF-8 letters and digits in account names Full-line comments in transactions Transaction tags on multiple lines","title":"Compatibility"},{"location":"compatibility/#beancount-compatibility","text":"The syntax of beancount is quite stable but it's expected to become slightly less restrictive as some missing features are implemented (such as posting-level tags). ledger2beancount aims to be compatible with the latest official release of beancount, but some functionality may require an unreleased version of beancount. You can install the latest development version of beancount directly from the beancount repository: pip3 install git+https://github.com/beancount/beancount/ Currently, there are no features that require an unreleased version of beancount. ledger2beancount is largely compatible with Beancount 2.0. If you use the following features, you need Beancount 2.1: UTF-8 letters and digits in account names Full-line comments in transactions Transaction tags on multiple lines","title":"Beancount compatibility"},{"location":"configuration/","text":"Configuration \uf0c1 ledger2beancount can use a configuration file. It will search for the config file ledger2beancount.yml in the current working directory. If that file is not found, it will look for $HOME/.config/ledger2beancount/config.yml . You can also pass an alternative config file via --config/-c . The file must end in .yml or .yaml . See the sample config file for the variables you can use. While the configuration file is optional, you may have to define a number of variables for ledger2beancount to work correctly with your ledger files: ledger_indent sets the indentation level used in your ledger file (by default 4 ). date_format has to be configured if you don't use the date format YYYY-MM-DD . decimal_comma has to be set to true if you use commas as the decimal separator (for example, 10,12 EUR meaning 10 Euro and 12 cents). commodity_map defines mappings from ledger to beancount commodities. You have to set this if you use commodity codes like \u20ac or \u00a3 (to map them to EUR and GBP , respectively). Additionally, these options are useful to configure beancount: operating_currencies : a list of the currencies you frequently use. beancount_header : a file which is embedded at the beginning of the converted beancount file which can include beancount option statements, plugin directives, query information and more. Other variables can be set to use various functionality offered by ledger2beancount. All variables are described below. Please read the user guide to learn how to use these variables to configure ledger2beancount for your needs. Input options \uf0c1 The following options may be needed for ledger2beancount to interpret your ledger files correctly. date_format The date format used in your ledger file (default: %Y-%m-%d ). date_format_no_year The date format for dates without the year when ledger's Y / year directive is used (default: %m-%d ). ledger_indent Sets the indentation level used in your ledger file (default: 4 ). decimal_comma Parses amounts with the decimal comma (e.g. 10,00 EUR ). Set this option to true if you use option --decimal-comma in ledger. hledger Tells ledger2beancount whether to attempt to parse hledger-specific features. Other options \uf0c1 beancount_indent Sets the indentation level for the generated beancount file (default: 2 ). operating_currencies A list of frequently used currencies. This is used by fava, the web UI for beancount. automatic_declarations Emit account and commodity declarations. (Default: true ) Note: the declarations done in ledger via account and commodity declarations are always converted. If this option is true , declarations are created for those which have not been explicitly declared in ledger but used. account_open_date The date used to open accounts (default: 1970-01-01 ). commodities_date The date used to create commodities (default: 1970-01-01 ). beancount_header Specifies a file which serves as a beancount \"header\", i.e. it's put at the beginning of the converted beancount file. You can use such a header to specify options for beancount, such as option \"title\" , define plugin directives or beancount query information. ignore_marker Specifies a marker that tells ledger2beancount to ignore a line if the marker is found. keep_marker Specifies a marker that tells ledger2beancount to take a line from the input that is commented out, uncomment it and display it in the output. convert_virtual Specifies whether virtual postings should be converted. If set to true , virtual postings in brackets will be made into real accounts. (Virtual postings in parentheses are always ignored, regardless of this option.) account_map Specifies a hash of account names to be mapped to other account names. account_regex Specifies a hash of regular expressions to replace account names. commodity_map Specifies a mapping of ledger commodities to beancount commodities. metadata_map Specifies a mapping of ledger metadata keys to corresponding beancount keys. payee_tag Specify a metadata tag (after the mapping done by metadata_map ) used to set the payee. payer_tag Specify a metadata tag (after the mapping done by metadata_map ) used to set the payee. payee_split Specifies a list of regular expressions to split ledger's payee field into payee and narration. You have to use the named capture groups payee and narration . payee_match Specifies a list of regular expressions and corresponding payees. The whole ledger payee becomes the narration and the matched payee from the regular expression becomes the payee. postdate_tag Specifies the metadata tag to be used to store posting dates. (Use the empty string if you don't want the metadata to be added to beancount.) auxdate_tag Specifies the metadata tag to be used to store auxiliary dates (also known as effective dates; or date2 in hledger). (Use the empty string if you don't want the metadata to be added to beancount.) code_tag Specifies the metadata tag to be used to store transaction codes. (Use the empty string if you don't want the metadata to be added to beancount.) link_match Specifies a list of regular expressions that will cause a tag to be rendered as a link. link_tags Specifies a list of metadata tags whose values should be converted to beancount links instead of metadata. Tags are case insensitive and values must not contain whitespace. currency_is_commodity Specifies a list of commodities that should be treated as commodities rather than currencies even though they consist of 3 characters (which is usually a characteristic of a currency). Expects beancount commodities (i.e. after transformation and mapping). commodity_is_currency Specifies a list of commodities that should be treated as currencies (in the sense that cost is not retained). Expects beancount commodities (i.e. after transformation and mapping).","title":"Configuration"},{"location":"configuration/#configuration","text":"ledger2beancount can use a configuration file. It will search for the config file ledger2beancount.yml in the current working directory. If that file is not found, it will look for $HOME/.config/ledger2beancount/config.yml . You can also pass an alternative config file via --config/-c . The file must end in .yml or .yaml . See the sample config file for the variables you can use. While the configuration file is optional, you may have to define a number of variables for ledger2beancount to work correctly with your ledger files: ledger_indent sets the indentation level used in your ledger file (by default 4 ). date_format has to be configured if you don't use the date format YYYY-MM-DD . decimal_comma has to be set to true if you use commas as the decimal separator (for example, 10,12 EUR meaning 10 Euro and 12 cents). commodity_map defines mappings from ledger to beancount commodities. You have to set this if you use commodity codes like \u20ac or \u00a3 (to map them to EUR and GBP , respectively). Additionally, these options are useful to configure beancount: operating_currencies : a list of the currencies you frequently use. beancount_header : a file which is embedded at the beginning of the converted beancount file which can include beancount option statements, plugin directives, query information and more. Other variables can be set to use various functionality offered by ledger2beancount. All variables are described below. Please read the user guide to learn how to use these variables to configure ledger2beancount for your needs.","title":"Configuration"},{"location":"configuration/#input-options","text":"The following options may be needed for ledger2beancount to interpret your ledger files correctly. date_format The date format used in your ledger file (default: %Y-%m-%d ). date_format_no_year The date format for dates without the year when ledger's Y / year directive is used (default: %m-%d ). ledger_indent Sets the indentation level used in your ledger file (default: 4 ). decimal_comma Parses amounts with the decimal comma (e.g. 10,00 EUR ). Set this option to true if you use option --decimal-comma in ledger. hledger Tells ledger2beancount whether to attempt to parse hledger-specific features.","title":"Input options"},{"location":"configuration/#other-options","text":"beancount_indent Sets the indentation level for the generated beancount file (default: 2 ). operating_currencies A list of frequently used currencies. This is used by fava, the web UI for beancount. automatic_declarations Emit account and commodity declarations. (Default: true ) Note: the declarations done in ledger via account and commodity declarations are always converted. If this option is true , declarations are created for those which have not been explicitly declared in ledger but used. account_open_date The date used to open accounts (default: 1970-01-01 ). commodities_date The date used to create commodities (default: 1970-01-01 ). beancount_header Specifies a file which serves as a beancount \"header\", i.e. it's put at the beginning of the converted beancount file. You can use such a header to specify options for beancount, such as option \"title\" , define plugin directives or beancount query information. ignore_marker Specifies a marker that tells ledger2beancount to ignore a line if the marker is found. keep_marker Specifies a marker that tells ledger2beancount to take a line from the input that is commented out, uncomment it and display it in the output. convert_virtual Specifies whether virtual postings should be converted. If set to true , virtual postings in brackets will be made into real accounts. (Virtual postings in parentheses are always ignored, regardless of this option.) account_map Specifies a hash of account names to be mapped to other account names. account_regex Specifies a hash of regular expressions to replace account names. commodity_map Specifies a mapping of ledger commodities to beancount commodities. metadata_map Specifies a mapping of ledger metadata keys to corresponding beancount keys. payee_tag Specify a metadata tag (after the mapping done by metadata_map ) used to set the payee. payer_tag Specify a metadata tag (after the mapping done by metadata_map ) used to set the payee. payee_split Specifies a list of regular expressions to split ledger's payee field into payee and narration. You have to use the named capture groups payee and narration . payee_match Specifies a list of regular expressions and corresponding payees. The whole ledger payee becomes the narration and the matched payee from the regular expression becomes the payee. postdate_tag Specifies the metadata tag to be used to store posting dates. (Use the empty string if you don't want the metadata to be added to beancount.) auxdate_tag Specifies the metadata tag to be used to store auxiliary dates (also known as effective dates; or date2 in hledger). (Use the empty string if you don't want the metadata to be added to beancount.) code_tag Specifies the metadata tag to be used to store transaction codes. (Use the empty string if you don't want the metadata to be added to beancount.) link_match Specifies a list of regular expressions that will cause a tag to be rendered as a link. link_tags Specifies a list of metadata tags whose values should be converted to beancount links instead of metadata. Tags are case insensitive and values must not contain whitespace. currency_is_commodity Specifies a list of commodities that should be treated as commodities rather than currencies even though they consist of 3 characters (which is usually a characteristic of a currency). Expects beancount commodities (i.e. after transformation and mapping). commodity_is_currency Specifies a list of commodities that should be treated as currencies (in the sense that cost is not retained). Expects beancount commodities (i.e. after transformation and mapping).","title":"Other options"},{"location":"contributing/","text":"Bugs and contributions \uf0c1 If you find any bugs in ledger2beancount or believe the conversion from ledger to beancount could be improved, please open an issue . Please include a small test case so we can reproduce the problem. If you'd like to contribute code to ledger2beancount, please submit a pull request on GitHub or send a git format-patch patch (series) to the authors via email . Please make sure you add a test case under tests and update the documentation ( docs/ , and possibly README.md and examples/illustrated.md ). You can run the test suite with make test .","title":"Bugs and contributions"},{"location":"contributing/#bugs-and-contributions","text":"If you find any bugs in ledger2beancount or believe the conversion from ledger to beancount could be improved, please open an issue . Please include a small test case so we can reproduce the problem. If you'd like to contribute code to ledger2beancount, please submit a pull request on GitHub or send a git format-patch patch (series) to the authors via email . Please make sure you add a test case under tests and update the documentation ( docs/ , and possibly README.md and examples/illustrated.md ). You can run the test suite with make test .","title":"Bugs and contributions"},{"location":"features/","text":"Features \uf0c1 The majority of features from ledger are supported by ledger2beancount. Fully supported \uf0c1 Accounts Account declarations ( account ... ) Conversion of invalid account names Mapping of account names Directive apply account Account aliases ( alias ) Balance assignments Balance assertions Comments Comments in and outside of transactions Directives comment and test Commodities Commodity declarations ( commodity ... ) Commodity symbols like $ , \u00a3 and \u20ac Commodities placed in front and after the amount Conversion of invalid commodities Mapping of commodities Directives bucket / A include Year / Y , apply year Flags State flags (posting flags) Transaction state (transaction flags) Inline math Very simple inline math only Lots Lot dates Lot notes Per unit and total costs and prices Conversion of ledger price to beancount cost Metadata Payees Obtain payee from metadata Split payee into payee and narration Assign payee based on narration Tags Directive apply tag Mapping #tags to ^links Partly supported \uf0c1 Amounts Decimal comma (not supported in beancount) Dates Dates on posting-level (no equivalence in beancount) Auxiliary dates (no equivalence in beancount) Effective dates (no equivalence in beancount) Deferred postings (no equivalence in beancount) Directives eval : skipped (not supported in beancount) payee : skipped (not needed in beancount) python : skipped (not supported in beancount) tag : skipped (not needed in beancount) value : skipped (not supported in beancount) Fixated prices ( =$10 and the fixed directive) Tags and links on posting-level (not supported by beancount) Transaction codes: stored as metadata (no equivalence in beancount) Virtual postings: can be skipped or converted to real postings Virtual posting costs: recognised but skipped (no equivalence in beancount) Unsupported in beancount \uf0c1 The following features are not supported in beancount and therefore commented out during the conversion from ledger to beancount: Amounts without commodities Automated transactions Checks and assertions ( check and assert ) Commodity conversion ( C AMOUNT1 = AMOUNT2 ) Commodity format ( D AMOUNT ) Commodity pricing: ignore pricing ( N SYMBOL ) Timeclock support ( I , i , O , o , b , h ) Periodic transactions Unsupported in ledger2beancount \uf0c1 The following ledger features are currently not supported by ledger2beancount: The define directive Contributions are welcome!","title":"Features"},{"location":"features/#features","text":"The majority of features from ledger are supported by ledger2beancount.","title":"Features"},{"location":"features/#fully-supported","text":"Accounts Account declarations ( account ... ) Conversion of invalid account names Mapping of account names Directive apply account Account aliases ( alias ) Balance assignments Balance assertions Comments Comments in and outside of transactions Directives comment and test Commodities Commodity declarations ( commodity ... ) Commodity symbols like $ , \u00a3 and \u20ac Commodities placed in front and after the amount Conversion of invalid commodities Mapping of commodities Directives bucket / A include Year / Y , apply year Flags State flags (posting flags) Transaction state (transaction flags) Inline math Very simple inline math only Lots Lot dates Lot notes Per unit and total costs and prices Conversion of ledger price to beancount cost Metadata Payees Obtain payee from metadata Split payee into payee and narration Assign payee based on narration Tags Directive apply tag Mapping #tags to ^links","title":"Fully supported"},{"location":"features/#partly-supported","text":"Amounts Decimal comma (not supported in beancount) Dates Dates on posting-level (no equivalence in beancount) Auxiliary dates (no equivalence in beancount) Effective dates (no equivalence in beancount) Deferred postings (no equivalence in beancount) Directives eval : skipped (not supported in beancount) payee : skipped (not needed in beancount) python : skipped (not supported in beancount) tag : skipped (not needed in beancount) value : skipped (not supported in beancount) Fixated prices ( =$10 and the fixed directive) Tags and links on posting-level (not supported by beancount) Transaction codes: stored as metadata (no equivalence in beancount) Virtual postings: can be skipped or converted to real postings Virtual posting costs: recognised but skipped (no equivalence in beancount)","title":"Partly supported"},{"location":"features/#unsupported-in-beancount","text":"The following features are not supported in beancount and therefore commented out during the conversion from ledger to beancount: Amounts without commodities Automated transactions Checks and assertions ( check and assert ) Commodity conversion ( C AMOUNT1 = AMOUNT2 ) Commodity format ( D AMOUNT ) Commodity pricing: ignore pricing ( N SYMBOL ) Timeclock support ( I , i , O , o , b , h ) Periodic transactions","title":"Unsupported in beancount"},{"location":"features/#unsupported-in-ledger2beancount","text":"The following ledger features are currently not supported by ledger2beancount: The define directive Contributions are welcome!","title":"Unsupported in ledger2beancount"},{"location":"guide/","text":"User guide \uf0c1 ledger2beancount supports most of the syntax from ledger. It also offers some features to improve the conversion from ledger to beancount. If you're new to beancount, we suggest you read this section in parallel to the illustrated ledger file . This example ledger file explains differences between ledger and beancount, shows how ledger syntax is converted to beancount and describes how you can use the features described in this section to improve the conversion from ledger to beancount. The illustrated example uses the same subsections as this section, so it's easy to follow in parallel. You can convert the illustrated ledger file to beancount like this: ledger2beancount --config examples/illustrated.yml examples/illustrated.ledger But please be aware that it doesn't pass bean-check . See the comments in the file as to why. Note on regular expressions : many of the features described below require you to specify regular expressions in ledger2beancount configuration file. The expected syntax (and semantics) for all such values is that of Perl regular expressions . Accounts \uf0c1 ledger2beancount will convert ledger account declarations to beancount open statements using the account_open_date variable as the opening date. The note is used as the description . Unlike ledger, beancount requires declarations for all account names. If an account was not declared in your ledger file but used, ledger2beancount will automatically create an open statement in beancount. You can turn this off by setting automatic_declarations to false . This is useful if you have include files and run ledger2beancount several times since duplicate open statements for the same account will result in an error from beancount. ledger2beancount replaces ledger account names with valid beancount accounts and therefore performs the following transformations automatically: Replaces space and other invalid characters with dash ( Liabilities:Credit Card becomes Liabilities:Credit-Card ) Replaces account names starting with lower case letters with upper case letters ( Assets:test becomes Assets:Test ) Ensures the first letter is a letter or number by replacing a non-letter first character with an X . While these transformations lead to valid beancount account names, they might not be what you desire. Therefore, you can add account mappings to account_map to map the transformed account names to something different. The mapping will work on your ledger account names and on the account names after the transformation. Unlike ledger, beancount expects all account names to start with one of five account types, also known as root names. The default root names are Assets , Liabilities , Equity , Expenses , and Income . If you want to use other root names, you can configure them using the beancount options name_assets , name_liabilities , name_equity , name_expenses , and name_income . If you use more than five root names, you will have to rename them. ledger2beancount offers the account_regex option to mass rename account names. If you use the top-level root name Accrued to track accounts payable and accounts receivable, you can rename them with this account_regex config option: account_regex: ^Accrued:Accounts Payable:(.*): Liabilities:Accounts-Payable:$1 ^Accrued:Accounts Receivable:(.*): Assets:Accounts-Receivable:$1 Ledger's apply account and alias directives are supported. The mapping of account names described above is done after these directives. Amounts \uf0c1 In ledger, amounts can be placed after the commodity. This is converted to beancount with the amount first, followed by the commodity. If you use commas as the decimal separator (i.e. values like 10,12 , using the ledger option --decimal-comma ) you have to set the decimal_comma option to true . Please note that commas are not supported as the decimal separator in beancount at the moment ( issue 204 ) so your amounts are converted not to use comma as the decimal separator. Commas as separators for thousands (e.g. 1,000,000 ) are supported by beancount. Ledger allows amounts without commodities, e.g.: Assets:Test 10.00 While this is allowed in ledger (but not in beancount), it's not recommended and ledger2beancount does not support amounts without commodities. Please add a commodity before using ledger2beancount. Commodities \uf0c1 Like accounts, ledger2beancount will convert ledger commodity declarations to beancount. The note is converted to name . As with account names, ledger2beancount will create commodity statements for all commodities used in your ledger file (if automatic_declarations is true ). ledger2beancount will automatically convert commodities to valid beancount commodities. This involves replacing all invalid characters with a dash (a character allowed in beancount commodities but not in ledger commodities), stripping quoted commodities, making the commodity uppercase and limiting it to 24 characters. Furthermore, the first character will be replaced with an X if it's not a letter and the same will be done for the last character if it's not a letter or digit. Finally, all beancount commodities currently have to consist of at least two characters ( issue 192 ). If you require a mapping between ledger and beancount commodities, you can use commodity_map . You can use your ledger commodity names or the names after the transformation in the map to perform a mapping to another commodity name. Commodity symbols (like $ , \u20ac and \u00a3 ) are supported and converted to their respective commodity codes (like USD , EUR , GBP ). Update commodity_map if you use other symbols. Flags \uf0c1 ledger2beancount supports both transaction flags ( transaction state ) and account flags ( state flags ). Dates \uf0c1 ledger supports a wide range of date formats whereas beancount requires all dates in the format YYYY-MM-DD (ISO 8601). The variable date_format has to be set if you don't use ISO 8601 for the dates in your ledger file. date_format uses the same format as the ledger options --input-date-format and --date-format (see man 1 date ). Ledger allows dates without a year if the year is declared using the Y , year and apply year directives. If date_format_no_year is set, ledger2beancount can convert such dates to YYYY-MM-DD . Posting-level dates are recognized by ledger2beancount and stored as metadata according to the postdate_tag ( date by default) but this has no effect in beancount. There is a proposal to support this functionality in a different way, but this is not implemented in beancount yet. While ledger2beancount itself doesn't read your ledger config file, the script ledger2beancount-ledger-config can be used to parse your ledger config file ( ~/.ledgerrc ) or your ledger file (ledger files may contain ledger options) to output the correct config option for ledger2beancount. Auxiliary dates \uf0c1 Beancount currently doesn't support ledger's auxiliary dates (or effective dates; also known as date2 in hledger) (but there is a proposal to support this functionality in a different way), so these are stored as metadata according to the auxdate_tag variable. Unset the variable if you don't want auxiliary dates to be stored as metadata. Account and posting-level auxiliary dates are supported. The effective_date plugin for beancount can be used to split postings which contain metadata with auxiliary dates into two postings. Transaction codes \uf0c1 Beancount doesn't support ledger's transaction codes . These are therefore stored as metadata if code_tag is set. While these ledger codes can be integers (e.g. check numbers), there's no such requirement in ledger and they can be any string. Therefore, ledger2beancount stores them as strings in beancount. If you'd like to change the type from string to integer, you can simply post-process the generated beancount file to remove the quotation marks around the codes. For example, if code_tag is set to code , you can use this Perl call: perl -pi -e 's/^(\\s+code: )\"(\\d+)\"$/$1$2/' *.beancount Narration \uf0c1 The ledger payee information, which is generally used as free-form text to describe the transaction, is stored in beancount's narration field and properly quoted. Payees \uf0c1 Ledger has limited support for payees. A payee metadata key can be set but this also overrides the free-form text to describe the transaction. Payees can also be declared explicitly in ledger but this is not required by beancount, so such declarations are ignored (they are preserved as comments). hledger allows the separation of payee and narration using the pipe character ( payee | narration ). This is supported by ledger2beancount if the hledger option is enabled. Since ledger has limited support for payees, ledger2beancount offers several features to determine the payee from the transaction itself. You can set payee_split and define a list of regular expressions which allow you to split ledger's payee field into payee and narration. You have to use regular expressions with the named capture groups payee and narration . For example, given the ledger transaction header 2018-03-18 * Supermarket (Tesco) and the configuration payee_split: - (?<narration>.*?)\\s+\\((?<payee>Tesco)\\) ledger2beancount will create this beancount transaction header: 2018-03-18 * \"Tesco\" \"Supermarket\" In other words, payee_split allows you to split the ledger payee into payee and narration in beancount. payee_split is a list of regular expressions and ledger2beancount stops when a match is found. Furthermore, you can use payee_match to match based on the ledger payee field and assign payees according to the match. This variable is a list consisting of regular expressions and the corresponding payees. For example, if your ledger contains a transaction like: 2018-03-18 * Oyster card top-up you can use payee_match: - ^Oyster card top-up: Transport for London to match the line and assign the payee Transport for London : 2018-03-18 * \"Transport for London\" \"Oyster card top-up\" Unlike payee_split , the full payee field from ledger is used as the narration in beancount. Again, ledger2beancount stops after the first match. Beancount comes with a plugin called fix_payees which offers a similar functionality to payee_match : it renames payees based on a set of rules which allow you to match account names, payees and the narration. The difference is that ledger2beancount's payee_match will write the matched payee to the beancount file whereas the fix_payees plugin leaves your input file intact and assigns the new payee within beancount. Please note that the payee_match is done after payee_split and payee_match is evaluated even if payee_split matched. This allows you to remove some information from the narration using payee_split while overriding the found payee using payee_match . The regular expressions from payee_split and payee_match are evaluated in a case sensitive manner by default. If you want case insensitive matches, you can prefix your pattern with (?i) , for example: payee_match: - (?i)^Oyster card top-up: Transport for London Finally, metadata describing a payee or payer will be used to set the payee. The tags used for that information can be specified in payee_tag and payer_tag . Payees identified with these tags will override the payees found with payee_split and payee_match (although in the case of payee_split the narration will be modified as per the regular expression). This allows you to define generic matches using payee_split and payee_match and override special cases using metadata information. Metadata \uf0c1 Account and posting metadata are converted to beancount syntax. Metadata keys used in ledger can be converted to different keys in beancount using metadata_map . Metadata can also be converted to links (see below). Beancount is more restrictive than ledger in what it allows as metadata keys. ledger2beancount will automatically convert metadata keys to valid beancount metadata keys. This involves replacing all invalid characters with a dash and making sure the first character is a lowercase letter (either by lowercasing a letter or adding the prefix x ). ledger2beancount also supports typed metadata (i.e. key:: instead of key: ) and doesn't quote the values accordingly, but you should make sure the values are valid in beancount. Tags \uf0c1 Beancount allows tags for transactions but currently doesn't support tags for postings ( issue 144 ). Because of this, posting-level tags are currently stored as metadata with the key tags . This should be seen as a workaround because metadata with the key tags is not treated the same way by beancount as proper tags. Ledger's apply tag directive is supported. If the string to apply is metadata or a link (according to link_match , see below), the information will be added to each transaction between apply tag and end tag . If it's a tag, beancount's equivalent of apply tag is used ( pushtag and poptag ). Note that tags can be defined in ledger using a tag directive. This is not required in beancount and there's no equivalent directive so all tag directives are skipped. Links \uf0c1 Beancount differentiates between tags and links whereas ledger doesn't. Links can be used in beancount to link several transactions together. ledger2beancount offers two mechanisms to convert ledger tags and metadata to links. First, you can define a list of metadata tags in link_tags whose values should be converted to beancount links instead of metadata. For example: link_tags: - Invoice with the ledger input 2018-03-19 * Invoice 4 ; Invoice:: 4 will be converted to 2018-03-19 * Invoice 4 ^4 instead of 2018-03-19 * Invoice 4 #4 Tags are case insensitive. Be aware that the metadata must not contain any whitespace. Since posting-level links are currently not allowed in beancount, they are stored as metadata. Second, you can define regular expressions in link_match to determine that a tag should be rendered as a link instead. For example, if you tag your trips in the format YYYY-MM-DD-foo , you could use link_match: - ^\\d\\d\\d\\d-\\d\\d-\\d\\d- to render them as links. So the ledger transaction header 2018-02-02 * Train Brussels airport to city ; :2018-02-02-brussels-fosdem:debian: would become the following in beancount: 2018-02-02 * \"Train Brussels airport to city\" ^2018-02-02-brussels-fosdem #debian Comments \uf0c1 Comments are supported. Currently, beancount doesn't accept top-level comments with the | marker ( issue 282 ). ledger2beancount changes such comments to use the ; marker. Virtual costs \uf0c1 Beancount does not have a concept of virtual costs ( issue 248 ). ledger2beancount therefore treats them as regular costs (or, rather, as regular prices). Lots \uf0c1 Lot costs and prices are supported, including per-unit and total lot costs. Lot dates and lot notes are converted to beancount. The behaviour of ledger and beancount is different when it comes to costs. In ledger, the statement Assets:Test 10.00 EUR @ 0.90 GBP creates the lot 10.00 EUR {0.90 GBP} . In beancount, this is not the case and a cost is only associated if done so explicitly: Assets:Test 10.00 EUR {0.90 GBP} This makes automatic conversion tricky because some statements should be simple conversions without associating a cost whereas it's vital to preserve the cost in other conversions. Generally, it doesn't make sense to preserve the cost for currency conversion (as opposed to conversions involving commodities like shares and stocks). Since most currency codes consist of 3 characters ( EUR , GBP , USD , etc), the script makes a simple conversion ( 10.00 EUR @ 0.90 GBP ) if both commodities consist of 3 characters. Otherwise it associates a cost ( 1 LU0274208692 {48.67 EUR} ). Since some 3 character symbols might be commodities instead of currencies (e.g. ETH and BTH ), the currency_is_commodity variable can be used to treat them as commodities and associate a cost in conversions. Similarly, commodity_is_currency can be used to configure commodities that should be treated as currencies in the sense that no cost is retained. This is useful if you, for example, track miles or hotel points that are sometimes redeemed for a cash value. Both of these variables expect beancount commodities, i.e. after transformation and mapping. (Note that beancount itself uses the terms \"commodity\" and \"currency\" interchangeably.) Balance assertions and assignments \uf0c1 Ledger balance assertions are converted to beancount balance statements. Please note that beancount evaluates balance assertions at the beginning of the day whereas ledger evaluates them at the end of the day (up to ledger 3.1.1) or at the end of the transaction (newer versions of ledger). Therefore, we schedule the balance assertion for the day after the original transaction. This assumes that there are no other transactions on the same day that change the balance again for this account. In addition to balance assertions, ledger also supports balance assignments . ledger2beancount can handle some, but not all types of balance assertions. The most simple case is something like: 2012-03-10 KFC Expenses:Food $20.00 Assets:Cash = $50.00 which can be handled like a balance assertion. However, ledger also allows transactions with two null postings when there's a balance assignment, as in: 2012-03-10 KFC Expenses:Food $20.00 Expenses:Drink Assets:Cash = $50.00 This can't be handled by ledger2beancount. While ledger can calculate how much you spent in Assets:Cash and balance it with Expenses:Drink , ledger2beancount can't. The transformation of this transaction will lead to two null postings, which bean-check will flag as invalid. Finally, ledger allows transactions solely consisting of two null postings when one has a balance assignment: 2012-03-10 Adjustment Assets:Cash = $500.00 Equity:Adjustments ledger2beancount will create a beancount pad statement, followed by a balance statement the following day, to set the correct balance. Automated transactions \uf0c1 Ledger's automated transactions are not supported in beancount. They are added as comments to the beancount file. Periodic transactions \uf0c1 Ledger's periodic transactions are not supported in beancount. They are added as comments to the beancount file. Virtual postings \uf0c1 Ledger's concept of virtual postings does not exist in beancount. Ledger has two types of virtual postings: those in parentheses ( (Budget:Food) ) which don't have to balance and those in brackets ( [Budget:Food] ) which have to balance. The former violate the accounting equation and can't be converted to beancount. The latter can be converted by making them into \"real\" accounts. ledger2beancount will do this if the convert_virtual option is set to true . By default, ledger2beancount will simply skip all virtual postings. If you set convert_virtual to true , be aware that all account names have to start with one of five assets classes ( Assets , etc). This is often not the case for virtual postings, so you will have to rename or map these account names. Inline math \uf0c1 Very simple inline math is supported in postings. Specifically, basic multiplications and divisions are supported, such as shown in the following transactions: 2018-03-26 * Simple inline math Assets:Test1 1 GBP @ (1/1.14 EUR) Assets:Test2 -0.88 EUR 2018-03-26 * Simple inline math Assets:Test1 (1 * 3 GBP) Assets:Test2 -3 GBP Support for more complex inline math would require substantial changes to the parser. Implicit conversions \uf0c1 ledger allows implicit conversions under some circumstances, such as in this example: 2019-01-29 * Implicit conversion Assets:A 10.00 EUR Assets:B -11.42 USD They are generally a bad idea since they make it very easy to hide problems that are hard to track down. beancount doesn't support implicit conversions. ledger2beancount supports implicit conversions if there are only two postings in a transaction (the most common case). More complex implicit conversations are not supported. Fixated prices and costs \uf0c1 ledger allows you to \"fix\" the cost or price at the time of a transaction, which means the amount will not be revalued subsequently when the price of the commodity changes in the pricedb . beancount doesn't have a notion of a fixated price or cost. However, you can achieve the same result in beancount. ledger2beancount will always convert ledger fixated prices and costs to costs in beancount. This way, the original cost is always attached to the transaction. You can then use SUM(COST(position)) to get the original value. hledger syntax \uf0c1 The syntax of hledger is largely compatible with that of ledger. If the hledger config option is set to true , ledger2beancount will look for some hledger specific features: 1) hledger allows the separation of a transaction's description into payee and note (narration) using the pipe character ( payee | narration ). 2) hledger allows date: and date2: to specify posting dates in posting comments in addition to ledger's [date=date2] syntax. 3) The syntax of tags is different in hledger: tag1: tag2:, tag3: in hledger vs :tag1:tag2:tag3: in ledger. Ignoring certain lines \uf0c1 Sometimes it makes sense to exclude certain lines from the conversion. For example, you may not want a specific include directive to be added to the beancount file if the file contains ledger-specific definitions or directives with no equivalence in beancount. ledger2beancount allows you to define a marker in the config file as ignore_marker . If this marker is found as a ledger comment on a line, the line will be skipped and not added to the beancount output. For example, given the config setting ignore_marker: NoL2B you could do this: C 1.00 Mb = 1024 Kb ; NoL2B If you want to skip several lines, you can use $ignore_marker begin and $ignore_marker end . This syntax is also useful for ledger include directives, which don't allow a comment on the same line. ; NoL2B begin include ledger-specific-header.ledger ; NoL2B end Since some people use ledger and beancount in parallel using ledger2beancount, it is sometimes useful to put beancount-specific commands in the input file. Of course, they may not be valid in ledger. Therefore, you can put a commented out line in the ledger input, mark it with the $keep_marker and ledger2beancount will uncomment the line and put it in the output. Given the input ; 2013-11-03 note Liabilities:CreditCard \"Called about fraud\" ; L2Bonly ledger2beancount will add the following line to the beancount output: 2013-11-03 note Liabilities:CreditCard \"Called about fraud\" You can also use $keep_marker begin and $keep_marker end to denote multiple lines that should be included in the output: ; L2Bonly begin ; 2014-07-09 event \"location\" \"Paris, France\" ; 2018-09-01 event \"location\" \"Bologna, Italy\" ; L2Bonly end","title":"User guide"},{"location":"guide/#user-guide","text":"ledger2beancount supports most of the syntax from ledger. It also offers some features to improve the conversion from ledger to beancount. If you're new to beancount, we suggest you read this section in parallel to the illustrated ledger file . This example ledger file explains differences between ledger and beancount, shows how ledger syntax is converted to beancount and describes how you can use the features described in this section to improve the conversion from ledger to beancount. The illustrated example uses the same subsections as this section, so it's easy to follow in parallel. You can convert the illustrated ledger file to beancount like this: ledger2beancount --config examples/illustrated.yml examples/illustrated.ledger But please be aware that it doesn't pass bean-check . See the comments in the file as to why. Note on regular expressions : many of the features described below require you to specify regular expressions in ledger2beancount configuration file. The expected syntax (and semantics) for all such values is that of Perl regular expressions .","title":"User guide"},{"location":"guide/#accounts","text":"ledger2beancount will convert ledger account declarations to beancount open statements using the account_open_date variable as the opening date. The note is used as the description . Unlike ledger, beancount requires declarations for all account names. If an account was not declared in your ledger file but used, ledger2beancount will automatically create an open statement in beancount. You can turn this off by setting automatic_declarations to false . This is useful if you have include files and run ledger2beancount several times since duplicate open statements for the same account will result in an error from beancount. ledger2beancount replaces ledger account names with valid beancount accounts and therefore performs the following transformations automatically: Replaces space and other invalid characters with dash ( Liabilities:Credit Card becomes Liabilities:Credit-Card ) Replaces account names starting with lower case letters with upper case letters ( Assets:test becomes Assets:Test ) Ensures the first letter is a letter or number by replacing a non-letter first character with an X . While these transformations lead to valid beancount account names, they might not be what you desire. Therefore, you can add account mappings to account_map to map the transformed account names to something different. The mapping will work on your ledger account names and on the account names after the transformation. Unlike ledger, beancount expects all account names to start with one of five account types, also known as root names. The default root names are Assets , Liabilities , Equity , Expenses , and Income . If you want to use other root names, you can configure them using the beancount options name_assets , name_liabilities , name_equity , name_expenses , and name_income . If you use more than five root names, you will have to rename them. ledger2beancount offers the account_regex option to mass rename account names. If you use the top-level root name Accrued to track accounts payable and accounts receivable, you can rename them with this account_regex config option: account_regex: ^Accrued:Accounts Payable:(.*): Liabilities:Accounts-Payable:$1 ^Accrued:Accounts Receivable:(.*): Assets:Accounts-Receivable:$1 Ledger's apply account and alias directives are supported. The mapping of account names described above is done after these directives.","title":"Accounts"},{"location":"guide/#amounts","text":"In ledger, amounts can be placed after the commodity. This is converted to beancount with the amount first, followed by the commodity. If you use commas as the decimal separator (i.e. values like 10,12 , using the ledger option --decimal-comma ) you have to set the decimal_comma option to true . Please note that commas are not supported as the decimal separator in beancount at the moment ( issue 204 ) so your amounts are converted not to use comma as the decimal separator. Commas as separators for thousands (e.g. 1,000,000 ) are supported by beancount. Ledger allows amounts without commodities, e.g.: Assets:Test 10.00 While this is allowed in ledger (but not in beancount), it's not recommended and ledger2beancount does not support amounts without commodities. Please add a commodity before using ledger2beancount.","title":"Amounts"},{"location":"guide/#commodities","text":"Like accounts, ledger2beancount will convert ledger commodity declarations to beancount. The note is converted to name . As with account names, ledger2beancount will create commodity statements for all commodities used in your ledger file (if automatic_declarations is true ). ledger2beancount will automatically convert commodities to valid beancount commodities. This involves replacing all invalid characters with a dash (a character allowed in beancount commodities but not in ledger commodities), stripping quoted commodities, making the commodity uppercase and limiting it to 24 characters. Furthermore, the first character will be replaced with an X if it's not a letter and the same will be done for the last character if it's not a letter or digit. Finally, all beancount commodities currently have to consist of at least two characters ( issue 192 ). If you require a mapping between ledger and beancount commodities, you can use commodity_map . You can use your ledger commodity names or the names after the transformation in the map to perform a mapping to another commodity name. Commodity symbols (like $ , \u20ac and \u00a3 ) are supported and converted to their respective commodity codes (like USD , EUR , GBP ). Update commodity_map if you use other symbols.","title":"Commodities"},{"location":"guide/#flags","text":"ledger2beancount supports both transaction flags ( transaction state ) and account flags ( state flags ).","title":"Flags"},{"location":"guide/#dates","text":"ledger supports a wide range of date formats whereas beancount requires all dates in the format YYYY-MM-DD (ISO 8601). The variable date_format has to be set if you don't use ISO 8601 for the dates in your ledger file. date_format uses the same format as the ledger options --input-date-format and --date-format (see man 1 date ). Ledger allows dates without a year if the year is declared using the Y , year and apply year directives. If date_format_no_year is set, ledger2beancount can convert such dates to YYYY-MM-DD . Posting-level dates are recognized by ledger2beancount and stored as metadata according to the postdate_tag ( date by default) but this has no effect in beancount. There is a proposal to support this functionality in a different way, but this is not implemented in beancount yet. While ledger2beancount itself doesn't read your ledger config file, the script ledger2beancount-ledger-config can be used to parse your ledger config file ( ~/.ledgerrc ) or your ledger file (ledger files may contain ledger options) to output the correct config option for ledger2beancount.","title":"Dates"},{"location":"guide/#auxiliary-dates","text":"Beancount currently doesn't support ledger's auxiliary dates (or effective dates; also known as date2 in hledger) (but there is a proposal to support this functionality in a different way), so these are stored as metadata according to the auxdate_tag variable. Unset the variable if you don't want auxiliary dates to be stored as metadata. Account and posting-level auxiliary dates are supported. The effective_date plugin for beancount can be used to split postings which contain metadata with auxiliary dates into two postings.","title":"Auxiliary dates"},{"location":"guide/#transaction-codes","text":"Beancount doesn't support ledger's transaction codes . These are therefore stored as metadata if code_tag is set. While these ledger codes can be integers (e.g. check numbers), there's no such requirement in ledger and they can be any string. Therefore, ledger2beancount stores them as strings in beancount. If you'd like to change the type from string to integer, you can simply post-process the generated beancount file to remove the quotation marks around the codes. For example, if code_tag is set to code , you can use this Perl call: perl -pi -e 's/^(\\s+code: )\"(\\d+)\"$/$1$2/' *.beancount","title":"Transaction codes"},{"location":"guide/#narration","text":"The ledger payee information, which is generally used as free-form text to describe the transaction, is stored in beancount's narration field and properly quoted.","title":"Narration"},{"location":"guide/#payees","text":"Ledger has limited support for payees. A payee metadata key can be set but this also overrides the free-form text to describe the transaction. Payees can also be declared explicitly in ledger but this is not required by beancount, so such declarations are ignored (they are preserved as comments). hledger allows the separation of payee and narration using the pipe character ( payee | narration ). This is supported by ledger2beancount if the hledger option is enabled. Since ledger has limited support for payees, ledger2beancount offers several features to determine the payee from the transaction itself. You can set payee_split and define a list of regular expressions which allow you to split ledger's payee field into payee and narration. You have to use regular expressions with the named capture groups payee and narration . For example, given the ledger transaction header 2018-03-18 * Supermarket (Tesco) and the configuration payee_split: - (?<narration>.*?)\\s+\\((?<payee>Tesco)\\) ledger2beancount will create this beancount transaction header: 2018-03-18 * \"Tesco\" \"Supermarket\" In other words, payee_split allows you to split the ledger payee into payee and narration in beancount. payee_split is a list of regular expressions and ledger2beancount stops when a match is found. Furthermore, you can use payee_match to match based on the ledger payee field and assign payees according to the match. This variable is a list consisting of regular expressions and the corresponding payees. For example, if your ledger contains a transaction like: 2018-03-18 * Oyster card top-up you can use payee_match: - ^Oyster card top-up: Transport for London to match the line and assign the payee Transport for London : 2018-03-18 * \"Transport for London\" \"Oyster card top-up\" Unlike payee_split , the full payee field from ledger is used as the narration in beancount. Again, ledger2beancount stops after the first match. Beancount comes with a plugin called fix_payees which offers a similar functionality to payee_match : it renames payees based on a set of rules which allow you to match account names, payees and the narration. The difference is that ledger2beancount's payee_match will write the matched payee to the beancount file whereas the fix_payees plugin leaves your input file intact and assigns the new payee within beancount. Please note that the payee_match is done after payee_split and payee_match is evaluated even if payee_split matched. This allows you to remove some information from the narration using payee_split while overriding the found payee using payee_match . The regular expressions from payee_split and payee_match are evaluated in a case sensitive manner by default. If you want case insensitive matches, you can prefix your pattern with (?i) , for example: payee_match: - (?i)^Oyster card top-up: Transport for London Finally, metadata describing a payee or payer will be used to set the payee. The tags used for that information can be specified in payee_tag and payer_tag . Payees identified with these tags will override the payees found with payee_split and payee_match (although in the case of payee_split the narration will be modified as per the regular expression). This allows you to define generic matches using payee_split and payee_match and override special cases using metadata information.","title":"Payees"},{"location":"guide/#metadata","text":"Account and posting metadata are converted to beancount syntax. Metadata keys used in ledger can be converted to different keys in beancount using metadata_map . Metadata can also be converted to links (see below). Beancount is more restrictive than ledger in what it allows as metadata keys. ledger2beancount will automatically convert metadata keys to valid beancount metadata keys. This involves replacing all invalid characters with a dash and making sure the first character is a lowercase letter (either by lowercasing a letter or adding the prefix x ). ledger2beancount also supports typed metadata (i.e. key:: instead of key: ) and doesn't quote the values accordingly, but you should make sure the values are valid in beancount.","title":"Metadata"},{"location":"guide/#tags","text":"Beancount allows tags for transactions but currently doesn't support tags for postings ( issue 144 ). Because of this, posting-level tags are currently stored as metadata with the key tags . This should be seen as a workaround because metadata with the key tags is not treated the same way by beancount as proper tags. Ledger's apply tag directive is supported. If the string to apply is metadata or a link (according to link_match , see below), the information will be added to each transaction between apply tag and end tag . If it's a tag, beancount's equivalent of apply tag is used ( pushtag and poptag ). Note that tags can be defined in ledger using a tag directive. This is not required in beancount and there's no equivalent directive so all tag directives are skipped.","title":"Tags"},{"location":"guide/#links","text":"Beancount differentiates between tags and links whereas ledger doesn't. Links can be used in beancount to link several transactions together. ledger2beancount offers two mechanisms to convert ledger tags and metadata to links. First, you can define a list of metadata tags in link_tags whose values should be converted to beancount links instead of metadata. For example: link_tags: - Invoice with the ledger input 2018-03-19 * Invoice 4 ; Invoice:: 4 will be converted to 2018-03-19 * Invoice 4 ^4 instead of 2018-03-19 * Invoice 4 #4 Tags are case insensitive. Be aware that the metadata must not contain any whitespace. Since posting-level links are currently not allowed in beancount, they are stored as metadata. Second, you can define regular expressions in link_match to determine that a tag should be rendered as a link instead. For example, if you tag your trips in the format YYYY-MM-DD-foo , you could use link_match: - ^\\d\\d\\d\\d-\\d\\d-\\d\\d- to render them as links. So the ledger transaction header 2018-02-02 * Train Brussels airport to city ; :2018-02-02-brussels-fosdem:debian: would become the following in beancount: 2018-02-02 * \"Train Brussels airport to city\" ^2018-02-02-brussels-fosdem #debian","title":"Links"},{"location":"guide/#comments","text":"Comments are supported. Currently, beancount doesn't accept top-level comments with the | marker ( issue 282 ). ledger2beancount changes such comments to use the ; marker.","title":"Comments"},{"location":"guide/#virtual-costs","text":"Beancount does not have a concept of virtual costs ( issue 248 ). ledger2beancount therefore treats them as regular costs (or, rather, as regular prices).","title":"Virtual costs"},{"location":"guide/#lots","text":"Lot costs and prices are supported, including per-unit and total lot costs. Lot dates and lot notes are converted to beancount. The behaviour of ledger and beancount is different when it comes to costs. In ledger, the statement Assets:Test 10.00 EUR @ 0.90 GBP creates the lot 10.00 EUR {0.90 GBP} . In beancount, this is not the case and a cost is only associated if done so explicitly: Assets:Test 10.00 EUR {0.90 GBP} This makes automatic conversion tricky because some statements should be simple conversions without associating a cost whereas it's vital to preserve the cost in other conversions. Generally, it doesn't make sense to preserve the cost for currency conversion (as opposed to conversions involving commodities like shares and stocks). Since most currency codes consist of 3 characters ( EUR , GBP , USD , etc), the script makes a simple conversion ( 10.00 EUR @ 0.90 GBP ) if both commodities consist of 3 characters. Otherwise it associates a cost ( 1 LU0274208692 {48.67 EUR} ). Since some 3 character symbols might be commodities instead of currencies (e.g. ETH and BTH ), the currency_is_commodity variable can be used to treat them as commodities and associate a cost in conversions. Similarly, commodity_is_currency can be used to configure commodities that should be treated as currencies in the sense that no cost is retained. This is useful if you, for example, track miles or hotel points that are sometimes redeemed for a cash value. Both of these variables expect beancount commodities, i.e. after transformation and mapping. (Note that beancount itself uses the terms \"commodity\" and \"currency\" interchangeably.)","title":"Lots"},{"location":"guide/#balance-assertions-and-assignments","text":"Ledger balance assertions are converted to beancount balance statements. Please note that beancount evaluates balance assertions at the beginning of the day whereas ledger evaluates them at the end of the day (up to ledger 3.1.1) or at the end of the transaction (newer versions of ledger). Therefore, we schedule the balance assertion for the day after the original transaction. This assumes that there are no other transactions on the same day that change the balance again for this account. In addition to balance assertions, ledger also supports balance assignments . ledger2beancount can handle some, but not all types of balance assertions. The most simple case is something like: 2012-03-10 KFC Expenses:Food $20.00 Assets:Cash = $50.00 which can be handled like a balance assertion. However, ledger also allows transactions with two null postings when there's a balance assignment, as in: 2012-03-10 KFC Expenses:Food $20.00 Expenses:Drink Assets:Cash = $50.00 This can't be handled by ledger2beancount. While ledger can calculate how much you spent in Assets:Cash and balance it with Expenses:Drink , ledger2beancount can't. The transformation of this transaction will lead to two null postings, which bean-check will flag as invalid. Finally, ledger allows transactions solely consisting of two null postings when one has a balance assignment: 2012-03-10 Adjustment Assets:Cash = $500.00 Equity:Adjustments ledger2beancount will create a beancount pad statement, followed by a balance statement the following day, to set the correct balance.","title":"Balance assertions and assignments"},{"location":"guide/#automated-transactions","text":"Ledger's automated transactions are not supported in beancount. They are added as comments to the beancount file.","title":"Automated transactions"},{"location":"guide/#periodic-transactions","text":"Ledger's periodic transactions are not supported in beancount. They are added as comments to the beancount file.","title":"Periodic transactions"},{"location":"guide/#virtual-postings","text":"Ledger's concept of virtual postings does not exist in beancount. Ledger has two types of virtual postings: those in parentheses ( (Budget:Food) ) which don't have to balance and those in brackets ( [Budget:Food] ) which have to balance. The former violate the accounting equation and can't be converted to beancount. The latter can be converted by making them into \"real\" accounts. ledger2beancount will do this if the convert_virtual option is set to true . By default, ledger2beancount will simply skip all virtual postings. If you set convert_virtual to true , be aware that all account names have to start with one of five assets classes ( Assets , etc). This is often not the case for virtual postings, so you will have to rename or map these account names.","title":"Virtual postings"},{"location":"guide/#inline-math","text":"Very simple inline math is supported in postings. Specifically, basic multiplications and divisions are supported, such as shown in the following transactions: 2018-03-26 * Simple inline math Assets:Test1 1 GBP @ (1/1.14 EUR) Assets:Test2 -0.88 EUR 2018-03-26 * Simple inline math Assets:Test1 (1 * 3 GBP) Assets:Test2 -3 GBP Support for more complex inline math would require substantial changes to the parser.","title":"Inline math"},{"location":"guide/#implicit-conversions","text":"ledger allows implicit conversions under some circumstances, such as in this example: 2019-01-29 * Implicit conversion Assets:A 10.00 EUR Assets:B -11.42 USD They are generally a bad idea since they make it very easy to hide problems that are hard to track down. beancount doesn't support implicit conversions. ledger2beancount supports implicit conversions if there are only two postings in a transaction (the most common case). More complex implicit conversations are not supported.","title":"Implicit conversions"},{"location":"guide/#fixated-prices-and-costs","text":"ledger allows you to \"fix\" the cost or price at the time of a transaction, which means the amount will not be revalued subsequently when the price of the commodity changes in the pricedb . beancount doesn't have a notion of a fixated price or cost. However, you can achieve the same result in beancount. ledger2beancount will always convert ledger fixated prices and costs to costs in beancount. This way, the original cost is always attached to the transaction. You can then use SUM(COST(position)) to get the original value.","title":"Fixated prices and costs"},{"location":"guide/#hledger-syntax","text":"The syntax of hledger is largely compatible with that of ledger. If the hledger config option is set to true , ledger2beancount will look for some hledger specific features: 1) hledger allows the separation of a transaction's description into payee and note (narration) using the pipe character ( payee | narration ). 2) hledger allows date: and date2: to specify posting dates in posting comments in addition to ledger's [date=date2] syntax. 3) The syntax of tags is different in hledger: tag1: tag2:, tag3: in hledger vs :tag1:tag2:tag3: in ledger.","title":"hledger syntax"},{"location":"guide/#ignoring-certain-lines","text":"Sometimes it makes sense to exclude certain lines from the conversion. For example, you may not want a specific include directive to be added to the beancount file if the file contains ledger-specific definitions or directives with no equivalence in beancount. ledger2beancount allows you to define a marker in the config file as ignore_marker . If this marker is found as a ledger comment on a line, the line will be skipped and not added to the beancount output. For example, given the config setting ignore_marker: NoL2B you could do this: C 1.00 Mb = 1024 Kb ; NoL2B If you want to skip several lines, you can use $ignore_marker begin and $ignore_marker end . This syntax is also useful for ledger include directives, which don't allow a comment on the same line. ; NoL2B begin include ledger-specific-header.ledger ; NoL2B end Since some people use ledger and beancount in parallel using ledger2beancount, it is sometimes useful to put beancount-specific commands in the input file. Of course, they may not be valid in ledger. Therefore, you can put a commented out line in the ledger input, mark it with the $keep_marker and ledger2beancount will uncomment the line and put it in the output. Given the input ; 2013-11-03 note Liabilities:CreditCard \"Called about fraud\" ; L2Bonly ledger2beancount will add the following line to the beancount output: 2013-11-03 note Liabilities:CreditCard \"Called about fraud\" You can also use $keep_marker begin and $keep_marker end to denote multiple lines that should be included in the output: ; L2Bonly begin ; 2014-07-09 event \"location\" \"Paris, France\" ; 2018-09-01 event \"location\" \"Bologna, Italy\" ; L2Bonly end","title":"Ignoring certain lines"},{"location":"installation/","text":"Installation \uf0c1 ledger2beancount is a Perl script and relies on the following Perl modules: Config::Onion Date::Calc DateTime::Format::Strptime File::BaseDir Getopt::Long::Descriptive String::Interpolate YAML::XS You can install the required Perl modules with cpanminus : cpanm --installdeps . If you use Debian, you can install the dependencies with this command: sudo apt install libconfig-onion-perl libdate-calc-perl \\ libfile-basedir-perl libyaml-libyaml-perl \\ libgetopt-long-descriptive-perl libdatetime-format-strptime-perl \\ libstring-interpolate-perl Note that String::Interpolate ( libstring-interpolate-perl ) is not in Debian stable. ledger2beancount itself consists of one script. You can clone the repository and run the script directly or copy it to $HOME/bin or a similar location: git clone https://github.com/zacchiro/ledger2beancount/ ./bin/ledger2beancount examples/simple.ledger Arch Linux \uf0c1 ledger2beancount is available on AUR . Debian \uf0c1 ledger2beancount is available in Debian . macOS \uf0c1 You can install cpanm from Homebrew: brew install cpanminus Microsoft Windows \uf0c1 You can install Strawberry Perl on Windows and use cpanm as described above to install the required Perl modules. ledger2beancount is not packaged for Windows but you can clone this Git repository and run the script.","title":"Installation"},{"location":"installation/#installation","text":"ledger2beancount is a Perl script and relies on the following Perl modules: Config::Onion Date::Calc DateTime::Format::Strptime File::BaseDir Getopt::Long::Descriptive String::Interpolate YAML::XS You can install the required Perl modules with cpanminus : cpanm --installdeps . If you use Debian, you can install the dependencies with this command: sudo apt install libconfig-onion-perl libdate-calc-perl \\ libfile-basedir-perl libyaml-libyaml-perl \\ libgetopt-long-descriptive-perl libdatetime-format-strptime-perl \\ libstring-interpolate-perl Note that String::Interpolate ( libstring-interpolate-perl ) is not in Debian stable. ledger2beancount itself consists of one script. You can clone the repository and run the script directly or copy it to $HOME/bin or a similar location: git clone https://github.com/zacchiro/ledger2beancount/ ./bin/ledger2beancount examples/simple.ledger","title":"Installation"},{"location":"installation/#arch-linux","text":"ledger2beancount is available on AUR .","title":"Arch Linux"},{"location":"installation/#debian","text":"ledger2beancount is available in Debian .","title":"Debian"},{"location":"installation/#macos","text":"You can install cpanm from Homebrew: brew install cpanminus","title":"macOS"},{"location":"installation/#microsoft-windows","text":"You can install Strawberry Perl on Windows and use cpanm as described above to install the required Perl modules. ledger2beancount is not packaged for Windows but you can clone this Git repository and run the script.","title":"Microsoft Windows"},{"location":"license/","text":"License \uf0c1 ledger2beancount is distributed under the GNU General Public License version 3.0 or later. The SPDX license identifier is GPL-3.0-or-later : SPDX-License-Identifier: GPL-3.0-or-later Copyright \uf0c1 \u00a9 2016 Stefano Zacchiroli <zack@upsilon.cc> \u00a9 2018 Martin Michlmayr <tbm@cyrius.com> \u00a9 2020 Software in the Public Interest, Inc. The years indicated are the first year of contribution (see Why not bump the year on change? ).","title":"License and copyright"},{"location":"license/#license","text":"ledger2beancount is distributed under the GNU General Public License version 3.0 or later. The SPDX license identifier is GPL-3.0-or-later : SPDX-License-Identifier: GPL-3.0-or-later","title":"License"},{"location":"license/#copyright","text":"\u00a9 2016 Stefano Zacchiroli <zack@upsilon.cc> \u00a9 2018 Martin Michlmayr <tbm@cyrius.com> \u00a9 2020 Software in the Public Interest, Inc. The years indicated are the first year of contribution (see Why not bump the year on change? ).","title":"Copyright"},{"location":"usage/","text":"Usage \uf0c1 ledger2beancount accepts input from stdin or from a file and will write the converted data to stdout . You can run ledger2beancount like this on the example provided: ledger2beancount examples/simple.ledger > simple.beancount After you convert your ledger file, you should validate the generated beancount file with bean-check and fix all errors: bean-check simple.beancount You should also inspect the generated beancount file to see if it looks correct to you. Please note that ledger2beancount puts notes at the beginning of the generated beancount file if it encounters problems with the conversion. If you believe that ledger2beancount could have produced a better conversion or if you get an error message from ledger2beancount, please file a bug along with a simple test case. You can pipe the output of ledger2beancount to beancount's bean-format if you want to use the conversion as an opportunity to reformat your file.","title":"Usage"},{"location":"usage/#usage","text":"ledger2beancount accepts input from stdin or from a file and will write the converted data to stdout . You can run ledger2beancount like this on the example provided: ledger2beancount examples/simple.ledger > simple.beancount After you convert your ledger file, you should validate the generated beancount file with bean-check and fix all errors: bean-check simple.beancount You should also inspect the generated beancount file to see if it looks correct to you. Please note that ledger2beancount puts notes at the beginning of the generated beancount file if it encounters problems with the conversion. If you believe that ledger2beancount could have produced a better conversion or if you get an error message from ledger2beancount, please file a bug along with a simple test case. You can pipe the output of ledger2beancount to beancount's bean-format if you want to use the conversion as an opportunity to reformat your file.","title":"Usage"}]}